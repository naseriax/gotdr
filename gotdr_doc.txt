package main // import "naseredin.aramnejad"


CONSTANTS

const lightSpeed = 299.79181901
    Speed of light in vaccuum. It's used to calculate lightspeed in the fiber
    medium , Fiber length and scan resolution.


FUNCTIONS

func bellCoreVersion(hexData, charString string) float32
func errDealer(err error)
func fiberLength(hexData, charString string, fixParams fixInfos) float32
func hexParser(hexData string) int64
func jsonExport(data otdrData)
func main()
func readSorFile(filename string) (string, string)
    This function opens the sor file and returns a hex string (hexData) and a
    text string (charString) from the file to the main function. Basically
    reading the whole file and putting it in RAM

func reverse(s string) string
func totalLoss(hexData, charString string) float32

TYPES

type fixInfos struct {
	DateTime              time.Time `json:"Scan Date&Time"`
	Unit                  string
	ActualWavelength_nm   float32 `json:"Actual Wavelength"`
	PulseWidthNo          int64   `json:"Pulse Width No"`
	PulseWidth_ns         int64   `json:"Pulse Width(ns)"`
	SampleQty             int64   `json:"Sample Quantity"`
	Ior                   int64
	RefractionIndex       float32 `json:"Refraction Index"`
	FiberLightSpeed_km_ms float32 `json:"Fiber Light Speed"`
	Resolution_m          float32 `json:"RScan Resolution"`
	BackscatteringCo_dB   float32 `json:"Back-Scattering"`
	Averaging             int64
	AveragingTime_M       float32 `json:"Averaging Time"`
	Range_km              float32 `json:"Scan Range"`
}
    Fixed Params extracted from the sor file

func fixedParams(hexData, charString string) fixInfos

type genParams struct {
	CableId        string `json:"Cable Id"`
	FiberId        string `json:"Fiber Id"`
	LocationA      string
	LocationB      string
	BuildCondition string `json:"Build Condition"`
	Comment        string
	CableCode      string `json:"Cable Code"`
	Operator       string
	FiberType      string `json:"Fiber Type"`
	OtdrWavelength string `json:"OTDR Wavelength"`
}
    General Params extracted from the sor file

func genParam(charString string) genParams

type otdrData struct {
	Supplier        supPram
	GenInfo         genParams `json:"General Information"`
	Events          []otdrEvent
	FixInfo         fixInfos `json:"Fixed Parameters"`
	FiberLength_m   float32  `json:"Fiber Length(m)"`
	BellCoreVersion float32  `json:"Bellcore Version"`
	TotalLoss_dB    float32  `json:"Total Fiber Loss(dB)"`
}
    This is the struct wrapping all the extracted information and being exported
    as JSON

type otdrEvent struct {
	EventType               string  `json:"Event Type"`
	EventPoint_m            float32 `json:"Event Point(m)"`
	EventNumber             int     `json:"Event Number"`
	Slope                   float32 `json:"Slope(dB)"`
	SpliceLoss_dB           float32 `json:"Splice Loss(dB)"`
	ReflectionLoss_dB       float32 `json:"Reflection Loss(dB)"`
	EndOfPreviousEvent      int64   `json:"Previous Event-End"`
	BegOfCurrentEvent       int64   `json:"Current Event-Start"`
	EndOfCurrentEvent       int64   `json:"Current Event-End"`
	BegOfNextEvent          int64   `json:"Next Event-Start"`
	PeakpointInCurrentEvent int64   `json:"Peak point"`
}
    Event information extracted from the sor file

func keyEvents(hexData string, charString string, fiberLightSpeed_km_ms float32, resolution_m float32) []otdrEvent

type supPram struct {
	OtdrSupplier   string `json:"OTDR Supplier"`
	OtdrName       string `json:"OTDR Name"`
	OtdrSN         string `json:"OTDR SN"`
	OtdrModuleName string `json:"OTDR Module Name"`
	OtdrModuleSN   string `json:"OTDR Module SN"`
	OtdrSwVersion  string `json:"OTDR SW Version"`
	OtdrOtherInfo  string `json:"OTDR Other Info"`
}
    Supplier Params extracted from the sor file

func supParams(charString string) supPram

